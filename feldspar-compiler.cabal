name:           feldspar-compiler
version:        0.6.1.0
cabal-version:  >= 1.14
build-type:     Custom
license:        BSD3
license-file:   LICENSE
copyright:      Copyright (c) 2013-2015 Emil Axelsson, Peter Jonsson,
                                        Anders Persson, Josef Svenningsson
                Copyright (c) 2012 Emil Axelsson, Gergely DÃ©vai,
                                   Anders Persson, Josef Svenningsson
                Copyright (c) 2009-2011, ERICSSON AB
author:         Feldspar group,
                Eotvos Lorand University Faculty of Informatics
maintainer:     Emil Axelsson <emax@chalmers.se>,
                Anders Persson <anders.cj.persson@gmail.com>
stability:      experimental
homepage:       http://feldspar.github.com
bug-reports:    https://github.com/feldspar/feldspar-compiler/issues
synopsis:       Compiler for the Feldspar language
description:    Feldspar (**F**unctional **E**mbedded **L**anguage for **DSP**
                and **PAR**allelism) is an embedded DSL for describing digital
                signal processing algorithms.
                This library (FeldsparCompiler) contains a prototype compiler
                that supports C code generation from programs written in this
                language both according to ANSI C and also targeted to a real
                DSP HW.
category:       Compiler

source-repository head
  type:     git
  location: git://github.com/Feldspar/feldspar-compiler.git

Flag UseICC
  Description:         Use ICC for compiling benchmarks.
  Default:             False

library
  hs-source-dirs: src

  exposed-modules:
    Feldspar.Compiler
    Feldspar.Compiler.Imperative.Representation
    Feldspar.Compiler.Imperative.ExternalProgram
    Feldspar.Compiler.Imperative.FromCore
    Feldspar.Compiler.Imperative.FromCore.Interpretation
    Feldspar.Compiler.Imperative.Frontend
    Feldspar.Compiler.Backend.C.CodeGeneration
    Feldspar.Compiler.Backend.C.Library
    Feldspar.Compiler.Backend.C.MachineLowering
    Feldspar.Compiler.Backend.C.Tic64x
    Feldspar.Compiler.Backend.C.Options
    Feldspar.Compiler.Backend.C.Platforms
    Feldspar.Compiler.Backend.C.RuntimeLibrary
    Feldspar.Compiler.Frontend.Interactive.Interface
    Feldspar.Compiler.Plugin
    Feldspar.Compiler.Marshal
    Feldspar.Compiler.CallConv
    Feldspar.Compiler.Compiler
    Feldspar.Compiler.Error
    Feldspar.Compiler.ExternalProgram
    Feldspar.Compiler.Internal
    Feldspar.Runtime

  other-modules:
    Paths_feldspar_compiler

  default-language: Haskell2010

  build-depends:
    base              == 4.*,
    base-compat       >= 0.8,
    base-orphans,
    Cabal,
    ghc,
    ghc-paths,
    plugins-multistage >= 0.6   && < 0.7,
    feldspar-language  >= 0.6.1 && < 0.7,
    language-c-quote   >= 0.12  && < 0.13,
    bytestring         >= 0.9   && < 0.11,
    srcloc,
    mtl,
    pretty,
    filepath,
    containers,
    process,
    directory >= 1.1,
    th-orphans <= 0.13.6,
    -- needed for th-orphans-0.12.2
    nats < 1.1,
    template-haskell,
    data-default >= 0.5,
    storable-tuple  >= 0.0.2,
    storable-record >= 0.0.2.5

  if impl(ghc >= 8.0.0)
    build-depends:
      ghci

  default-extensions:

  include-dirs:
    ./clib

  cpp-options: -DCABAL_IS_USED
    -- Is there already such a symbol defined?

  c-sources:
   clib/feldspar_c99.c
   clib/taskpool.c
   clib/ivar.c

  cc-options: -std=c99 -Wall -fPIC

  if os(linux)
    extra-libraries: gcc_s pthread
      -- pthread needed on Emil's Ubuntu (15.04), but apparently not on Travis

  install-includes:
    feldspar_array.h
    feldspar_c99.h
    feldspar_c99.c
    feldspar_tic64x.h
    feldspar_tic64x.c
    feldspar_future.h
    log.h
    ivar.h
    ivar.c
    taskpool.h
    taskpool.c

  ghc-options: -fcontext-stack=100

test-suite regression
  type: exitcode-stdio-1.0

  hs-source-dirs: tests

  main-is: RegressionTests.hs

  default-language: Haskell2010

  build-depends:
    feldspar-language,
    feldspar-compiler,
    mtl,
    base,
    Cabal,
    process,
    bytestring       >= 0.9 && < 0.11,
    stringsearch     >= 0.3,
    tasty            >= 0.3,
    tasty-golden     >= 2.3.0.1,
    tasty-quickcheck >= 0.3,
    QuickCheck       >= 2.7.1 && < 3.0

test-suite callconv
  type: exitcode-stdio-1.0

  hs-source-dirs: tests

  main-is: CallingConvention.hs

  default-language: Haskell2010

  build-depends:
    feldspar-language,
    feldspar-compiler,
    base,
    tasty            >= 0.3,
    tasty-quickcheck >= 0.3,
    QuickCheck       >= 2.7.1 && < 3.0

benchmark crc
  type: exitcode-stdio-1.0

  hs-source-dirs: benchs

  main-is: CRC.hs

  default-language: Haskell2010

  ghc-options: -O2

  build-depends:
    feldspar-language,
    feldspar-compiler,
    data-default       >= 0.5.3 && < 0.6,
    base,
    deepseq,
    criterion          >= 1.0

benchmark fft
  type: exitcode-stdio-1.0

  hs-source-dirs: benchs

  main-is: FFT.hs

  default-language: Haskell2010

  ghc-options: -O2

  build-depends:
    feldspar-language,
    feldspar-compiler,
    data-default       >= 0.5.3 && < 0.6,
    base,
    deepseq,
    criterion

benchmark matmul
 type: exitcode-stdio-1.0

 hs-source-dirs: benchs

 main-is: MatMul.hs

 c-sources: benchs/MatMulC.c

 default-language: Haskell2010

 ghc-options: -O2

 CC-Options: -O2 -fno-vectorize
 if flag(UseICC)
   x-cc-name: icc

 build-depends:
   feldspar-language,
   feldspar-compiler,
   plugins-multistage,
   data-default       >= 0.5.3 && < 0.6,
   base,
   deepseq,
   criterion
