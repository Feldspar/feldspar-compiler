sudo: false
language: c

cache:
  directories:
    - .cabal-sandbox

matrix:
  include:
    - env: CABALVER=1.22 GHCVER=7.10.3
      addons: {apt: {sources: [hvr-ghc], packages: [cabal-install-1.22,ghc-7.10.3,happy-1.19.5,alex-3.1.7]}}
    - env: CABALVER=1.24 GHCVER=8.0.2
      addons: {apt: {sources: [hvr-ghc], packages: [cabal-install-1.24,ghc-8.0.2,happy-1.19.5,alex-3.1.7]}}
    - env: CABALVER=head GHCVER=head
      addons: {apt: {sources: [hvr-ghc], packages: [cabal-install-head,ghc-head,happy-1.19.5,alex-3.1.7]}}

  allow_failures:
    - env: CABALVER=head GHCVER=head

before_install:
  - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH
  - export PATH=/opt/alex/3.1.7/bin:/opt/happy/1.19.5/bin:$PATH
  - env
  # Fetch the latest feldspar-language from github
  # Note that we will fetch a branch with the same name as the current
  # branch in feldspar-compiler. This is to support CI of new features
  # depending on features in feldspar-language.
  - git clone -v https://github.com/Feldspar/feldspar-language
  - cd feldspar-language && git checkout $TRAVIS_BRANCH || git checkout master
  - echo "Using feldspar-language from " && git rev-parse HEAD
  - cd $TRAVIS_BUILD_DIR

install:
  - cabal --version
  - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - travis_retry cabal update
  - cabal sandbox init
  - cabal sandbox add-source feldspar-language
  - cabal install --only-dependencies --enable-tests --force-reinstalls

# Here starts the actual work to be performed for the package under test; any command which exits with a non-zero exit code causes the build to fail.
script:
  - if [ -f configure.ac ]; then autoreconf -i; fi
  - cabal configure --enable-tests -v2  # -v2 provides useful information for debugging
  - cabal build -j2  # this builds all libraries and executables (including tests/benchmarks)
  - cabal test
  - cabal check
  - cabal sdist   # tests that a source-distribution can be generated

# Check that the resulting source distribution can be built & installed.
# If there are no other `.tar.gz` files in `dist`, this can be even simpler:
# `cabal install --force-reinstalls dist/*-*.tar.gz`
  - SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz &&
    (cd dist && cabal sandbox init --sandbox=../.cabal-sandbox && cabal install -j2 --force-reinstalls "$SRC_TGZ")
